# Report-SPOFileVersions.PS1
# Example of how to process/analyze the file versions report generated by SharePoint Online to make the data
# easier to understand. The script reads the report.csv file generated by the SharePoint Online file versions report
# and processes the data to create a new report that shows the number of versions for each file, the first and last
# modified date, the average size of a version, the total size of all versions, the last person to modify the file, and
# the last snapshot date for the file. The script then displays the new report in a grid view.


function Get-FileSize {
    # Format File Size nicely
    param (
            [parameter(Mandatory = $true)]
            $InFileSize
        ) 
    
    If ($InFileSize -lt 1KB) { # Format the size of a document
        $FileSize = $InFileSize.ToString() + " B" 
    } 
    ElseIf ($InFileSize -lt 1MB) {
        $FileSize = $InFileSize / 1KB
        $FileSize = ("{0:n2}" -f $FileSize) + " KB"
    } 
    Elseif ($InFileSize -lt 1GB) {
        $FileSize = $InFileSize / 1MB
        $FileSize = ("{0:n2}" -f $FileSize) + " MB" 
    }
    Elseif ($InFileSize -ge 1GB) {
        $FileSize = $InFileSize / 1GB
        $FileSize = ("{0:n2}" -f $FileSize) + " GB" 
    }
    Return $FileSize
} 

$InputCSVFile = Read-Host "Enter the path to the SharePoint Online file versions report CSV file"
If (-not (Test-Path $InputCSVFile)) {
    Write-Host "File $InputCSVFile not found... exiting"
    Break
}

$SPOData = Import-CSV $InputCSVFile
# Reported site can be found in the first record of the report file
$WebURL = $SPOData[0].'WebUrl.Compact'

$Report = [System.Collections.Generic.List[Object]]::new()

Write-Host ("Processing {0} records" -f $SPOData.Count)
ForEach ($Item in $SPOData) {
    If (!([string]::IsNullOrWhiteSpace($Item.'DocId.Compact'))) {
       # Start of records for a new document
        $WebId                           = $Item.'WebId.Compact'
        $DocId                           = $Item.'DocId.Compact'
        $MajorVersion                    = $Item.'MajorVersion'
        $MinorVersion                    = $Item.'MinorVersion'
        $FileUrl                         = $Item.'FileUrl.Compact'
        $Size                            = $Item.Size
        $LastModifiedDate                = $Item.LastModifiedDate
        $ModifiedBy                      = $Item.'ModifiedBy_DisplayName.Compact'
        $SnapShotDate                    = $Item.SnapShotDate
        $SnapShotEstimated               = $Item.IsSnapshotDateEstimated
        $CurrentExpirationDate           = $Item.CurrentExpirationDate
        $AutomaticPolicyExpirationDate   = $Item.AutomaticPolicyExpirationDate
        $TargetExpirationDate            = $Item.TargetExpirationDate

        $Document = $FileURL.Split("/")[-1]
        $Folder = $FileUrl.SubString(0,(($FileUrl.Length-1) - ($Document.Length)))

    } Else {
        # A continuation of the previous document, so only populate some variables
        $MajorVersion                   = $Item.'MajorVersion'
        $MinorVersion                   = $Item.'MinorVersion'
        $Size                           = $Item.Size
        $LastModifiedDate               = $Item.LastModifiedDate
        $ModifiedBy                     = $Item.'ModifiedBy_DisplayName.Compact'
        $SnapShotDate                   = $Item.SnapShotDate
        $SnapShotEstimated              = $Item.IsSnapshotDateEstimated
        $CurrentExpirationDate          = $Item.CurrentExpirationDate
        $AutomaticPolicyExpirationDate  = $Item.AutomaticPolicyExpirationDate
        $TargetExpirationDate           = $Item.TargetExpirationDate

    }
    $ReportLine = [PSCustomObject] @{ 
        WebId                               = $WebId
        DocId                               = $DocId
        'Major version'                     = $MajorVersion
        'Minor version'                     = $MinorVersion
        Site                                = $WebUrl
        FileURL                             = $FileUrl
        Folder                              = $Folder
        Document                            = $Document
        Size                                = $Size
        'Last Modified Date'                = $LastModifiedDate
        'Last Modified By'                  = $ModifiedBy
        SnapShotDate                        = $SnapShotDate
        'SnapShot Estimated'                = $SnapShotEstimated
        'Current Expiration Date'           = $CurrentExpirationDate
        'Automatic Policy Expiration Date'  = $AutomaticPolicyExpirationDate
        'Target Expiration Date'            = $TargetExpirationDate
    }
    $Report.Add($ReportLine)
}


[array]$SPOFiles = $Report | Sort-Object DocId -unique | Select-Object -ExpandProperty DocId
Write-Host ("Found {0} unique files from {1} records in the report" -f $SPOFiles.Count, $Report.count)

$FilesReport = [System.Collections.Generic.List[Object]]::new()
[int]$i = 0
ForEach ($File in $SPOFiles) {
    $i++
    Write-Host ("Processing file {0} {1}/{2}" -f $File, $i, $SPOFiles.Count)
    $FileData = $Report | Where-Object {$_.DocId -eq $File} 
    $FileURL = $FileData[0].FileURL
    $FileData = $FileData | Sort-Object {$_.'Last Modified Date' -as [datetime]} -Descending
    $LastModifiedDate = $FileData[0].'Last Modified Date'
    $FirstModifiedDate = $FileData[-1].'Last Modified Date'
    $Sizes = $FileData | Measure-Object -Property Size -Minimum -Maximum -Sum -Average
    # Find records with a 'Last Modified By' value. Find unique values. Sort by date and select the first one
    # to find who last modified the file
    $LastModifiedBy = $FileData | Where-Object { -not [string]::IsNullOrEmpty($_.'Last Modified By') } `
        | Sort-Object 'Last Modified By' -Unique | Sort-Object {$_.LastModifiedDate -as [datetime]} `
        | Select-Object -First 1 |Select-Object -ExpandProperty 'Last Modified By'

    $ReportLine = [PSCustomObject] @{ 
        DocId                               = $File
        'Count of versions'                 = $FileData.Count
        'First modified'                    = Get-Date $FirstModifiedDate -format 'dd-MMM-yyyy HH:mm'
        'Last modified'                     = Get-Date $LastModifiedDate -format 'dd-MMM-yyyy HH:mm'
        'Average version size'              = Get-FileSize -InFileSize $Sizes.Average
        'Total versions size'               = Get-FileSize -InFileSize $Sizes.Sum
        Site                                = $WebURL
        FileURL                             = $FileURL
        Folder                              = $FileData[0].Folder
        Document                            = $FileData[0].Document
        'Last Modified by'                  = $LastModifiedBy
        'Last SnapShot Date'                = Get-Date $FileData[0].SnapShotDate -format 'dd-MMM-yyyy HH:mm'

    }
    $FilesReport.Add($ReportLine)

}

$FilesReport = $FilesReport | Sort-Object {$_.'Last modified' -as [datetime]} -Descending
$FilesReport | Out-GridView -Title "SPO File Versions Report"

# An example script used to illustrate a concept. More information about the topic can be found in the Office 365 for IT Pros eBook https://gum.co/O365IT/
# and/or a relevant article on https://office365itpros.com or https://www.practical365.com. See our post about the Office 365 for IT Pros repository 
# https://office365itpros.com/office-365-github-repository/ for information about the scripts we write.

# Do not use our scripts in production until you are satisfied that the code meets the needs of your organization. Never run any code downloaded from 
# the Internet without first validating the code in a non-production environment.