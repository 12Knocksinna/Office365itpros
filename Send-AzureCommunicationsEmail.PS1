# Send-AzureCommunicationsEmail.PS1
# An example script to show how to send email from Azure Communication Services using PowerShell
# V1.0 7-Jul-2024

# GitHub link: https://github.com/12Knocksinna/Office365itpros/blob/master/Send-AzureCommunicationsEmail.PS1

function Get-AccessToken {    
    # Get an access token for the tenant using the defined credentials
    $params = @{
        Uri    = "https://login.microsoftonline.com/$($TenantId)/oauth2/v2.0/token"
        Method = "POST"
        Body   = @{
            client_id     = $AppId
            client_secret = $AppSecret
            grant_type    = "client_credentials"
            scope         = "https://communication.azure.com/.default"
        }
    }

    # Call the REST API and get the access token
    $token = Invoke-RestMethod @params
    return $token.access_token
}

Function Get-MessageToRecipients { # Build a list of the To recipients for a message
    [cmdletbinding()]
    Param(
        [array]$ListOfAddresses )
    $To = @()

    ForEach ($SMTPAddress in $ListOfAddresses) {
        $Recipient = @{
            Address = $SMTPAddress
            displayName = $SMTPAddress
        }    
        $To += $Recipient
    }   
    Return $To 
}

# Replace the next three values with values for your tenant
# The App Id of the Entra ID registered app created to allow email to be sent
$AppId = 'e0789401-fc4f-499a-9bb2-8b0fd349798f'
# The secret created for the Entra ID app
$AppSecret = 'q7n8Q~xwBCGPz--2sVtDvQGgK4k-CsFtkKQxDb3~'
# The tenant identifier for your tenant
$TenantId = 'b662313f-14fc-43a2-9a7a-d2e27f4f3478'

# The sender's email address. This must be an address defined as a sender with Email Communication Services
$SenderAddress = 'DoNotReply@office365itpros.com'

# The recipient's email address
$RecipientAddresses = 'tony.redmond@live.com', "kim.akers@office365itpros.com"
$RecipientAddress = Get-MessageToRecipients -ListOfAddresses $RecipientAddresses
#$RecipientAddress = "Tony.Redmond@live"

# The URI for the Azure Communication Services API
$CommunicationEndPoint = "office365itpros.unitedstates.communication.azure.com"

# Define the URI for the Azure Communication Services API
$uri = "https://$CommunicationEndpoint/emails:send?api-version=2023-03-31"

# Define the headers for the REST API call
$headers = @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $(Get-AccessToken)"
}

# Define the structuire of the email, including the email headers, sender address, content, recipients, attachments, reply-to addresses, and tracking settings
$Email = @{
    # The headers of the email, including a unique ID generated by New-Guid
    headers = @{
        id = (New-Guid).Guid
    }
    # The sender's email address
    senderAddress = $senderAddress 
    # The content of the email, including the subject, plain text body, and HTML body
    content = @{
        subject   = "Office 365 for IT Pros Email Subscription"
        plainText = "This is a messsage about your subscription friom Office 365 for IT Pros. If you received this, our test was successful."
        html      = "<html><head><title>Office 365 for IT Pros</title></head><body><h1>This is a message about your subscription from Office 365 for IT Pros.</h1><p>If you received this, our test was successful.</p></body></html>"
    }
    # The recipients of the email, including the "to", "cc", and "bcc" addresses
    recipients                     = @{
        #to  = @(
        #    @{
        #        address     = $recipientAddress
        #        displayName = $recipientAddress
        #    }
        #)
        to = $RecipientAddress
        cc  = @(
            @{
                address     = 'o365itprosrenewals@office365itpros.com'
                displayName = 'Office 365 for IT Pros Renewals'
            }   
        )
    }
    # The reply-to addresses for the email - doesn't have to be the same as the sender address
    replyTo = @(
        @{
            address     = "o365itprosrenewals@office365itpros.com"
            displayName = "Office 365 for IT Pros Support"
        }
    )
    # A flag to disable user engagement tracking
    userEngagementTrackingDisabled = $true
}

# Convert the PowerShell object to JSON
# The -Depth parameter is set to 10 to ensure all levels of the object are converted
$EmailSettings = $Email | ConvertTo-Json -Depth 10

# Send the email
try {
    $response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $EmailSettings -UseBasicParsing
    $response
}
catch {
    Write-Error $_.Exception.Message
}

# An example script used to illustrate a concept. More information about the topic can be found in the Office 365 for IT Pros eBook https://gum.co/O365IT/
# and/or a relevant article on https://office365itpros.com or https://www.practical365.com. See our post about the Office 365 for IT Pros repository 
# https://office365itpros.com/office-365-github-repository/ for information about the scripts we write.

# Do not use our scripts in production until you are satisfied that the code meets the needs of your organization. Never run any code downloaded from the Internet without
# first validating the code in a non-production environment.