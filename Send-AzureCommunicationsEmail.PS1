# Send-AzureCommunicationsEmail.PS1
# An example script to show how to send email from Azure Communication Services using PowerShell
# V1.0 7-Jul-2024

# GitHub link: https://github.com/12Knocksinna/Office365itpros/blob/master/Send-AzureCommunicationsEmail.PS1

function Get-AccessToken {    
    # Get an access token for the tenant using the defined credentials
    $params = @{
        Uri    = "https://login.microsoftonline.com/$($TenantId)/oauth2/v2.0/token"
        Method = "POST"
        Body   = @{
            client_id     = $AppId
            client_secret = $AppSecret
            grant_type    = "client_credentials"
            scope         = "https://communication.azure.com/.default"
        }
    }

    # Call the REST API and get the access token
    $token = Invoke-RestMethod @params
    return $token.access_token
}

Function Get-MessageToRecipients { # Build a list of the To recipients for a message
    [cmdletbinding()]
    Param(
        [array]$ListOfAddresses )
    $To = @()

    ForEach ($SMTPAddress in $ListOfAddresses) {
        $Recipient = @{
            Address = $SMTPAddress
            displayName = $SMTPAddress
        }    
        $To += $Recipient
    }   
    Return $To 
}

# Replace the next three values with values for your tenant
# The App Id of the Entra ID registered app created to allow email to be sent
$AppId = 'e0789401-fc4f-499a-9bb2-8b0fd349798f'
# The secret created for the Entra ID app
$AppSecret = 'q7n8Q~xwBCGPz--2sVtDvQGgK4k-CsFtkKQxDb3~'
# The tenant identifier for your tenant
$TenantId = 'b662313f-14fc-43a2-9a7a-d2e27f4f3478'

# The sender's email address. This must be an address defined as a sender with Email Communication Services
$SenderAddress = 'DoNotReply@office365itpros.com'

# Endpoint for the Azure Communication Services API
$CommunicationEndPoint = "office365itpros.unitedstates.communication.azure.com"

# Full endpoint with API info for the Azure Communication Services API
$uri = "https://$CommunicationEndpoint/emails:send?api-version=2023-03-31"

# Define the headers for the REST API call
$headers = @{
    "Content-Type"  = "application/json"
    "Authorization" = "Bearer $(Get-AccessToken)"
}

# Define the content of the email - handcrafted HTML here
$Content = "<p>Dear Subscriber,</p>" +
"<p>You bought a full-price copy of the Office 365 for IT Pros eBook (2024 edition) during June 2024." +
"We promised to make a free subscription to the 2025 edition to you, but you have not yet accessed" +
"Gumroad.com to claim your free copy of <b><i>Office 365 for IT Pros (2025 edition)</i></b>, including " +
"the new <b><i>Automating Microsoft 365 with PowerShell</i></b> eBook.</span></p>" +
"
<p><span lang=EN-US>To claim your free subscription, please " +
'<a href="https://o365itpros.gumroad.com/l/O365IT/June2024Buyer">click this link</a>. ' +
"After receiving the emailed receipt, use the View Content button in the receipt to access the EPUB " +
"and PDF files for the two books. If you do not get the receipt, please check your Junk Email folder.</span></p>" +

"<p><span lang=EN-US>If you have any other problems, please contact us at o365itprosrenewals@office365itpros.com " +
"and we will do our best to resolve the issue.</span></p>" +
"<p><span lang=EN-US>Tony</span></p>"

[array]$RecipientList = Import-CSV 'c:\temp\UserData.CSV'

ForEach ($Recipient in $RecipientList.Email) {
    # Construct the TO addresses for the message
    $RecipientAddresses = $Recipient, 'o365itprosrenewals@office365itpros.com'
    $RecipientAddress = Get-MessageToRecipients -ListOfAddresses $RecipientAddresses
    Write-Host ("Sending email to {0}" -f $Recipient)

# Define the email settings
    $Email = @{
        # The headers of the email, including a unique ID generated by New-Guid
        headers = @{
            id = (New-Guid).Guid
        }
        # The sender's email address
        senderAddress = $senderAddress 
        # The content of the email, including the subject and HTML body
        content = @{
            subject   = "Office 365 for IT Pros Email Subscription"
        #plainText = "This is an email from Office 365 for IT Pros"
            html      = $Content
        }
        # The recipients of the email
        recipients = @{
        #to  = @(
        #    @{
        #        address     = $recipientAddress
        #        displayName = $recipientAddress
        #    }
        #)
            to = $RecipientAddress
       # cc  = @(
       #     @{
       #         address     = 'o365itprosrenewals@office365itpros.com'
       #         displayName = 'Office 365 for IT Pros Renewals'
       #     }   
       # )
        }
        # The reply-to addresses for the email - doesn't have to be the same as the sender address
        replyTo = @(
            @{
                address     = "o365itprosrenewals@office365itpros.com"
                displayName = "Office 365 for IT Pros Support"
            }
        )
        userEngagementTrackingDisabled = $false
        }

    # Convert the email settings structure to JSON
    $EmailSettings = $Email | ConvertTo-Json -Depth 10

    # Send the email
    try {
        $response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $EmailSettings -UseBasicParsing
        $response   
    }
    catch {
        Write-Error $_.Exception.Message
    }
}

# An example script used to illustrate a concept. More information about the topic can be found in the Office 365 for IT Pros eBook https://gum.co/O365IT/
# and/or a relevant article on https://office365itpros.com or https://www.practical365.com. See our post about the Office 365 for IT Pros repository 
# https://office365itpros.com/office-365-github-repository/ for information about the scripts we write.

# Do not use our scripts in production until you are satisfied that the code meets the needs of your organization. Never run any code downloaded from the Internet without
# first validating the code in a non-production environment.